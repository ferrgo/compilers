//Gramática para a linguagem FORTRAN--, um subconjunto do FORTRAN 90 (com algumas adaptações)

//Equipe:
// Hugo Ferreira
// Luis Felipe Sampaio
// Oto Alves

Lexic

// Na nossa linguagem, os comentários começam com ! e vão até o fim da linha

ID           ->  LETTER(LETTER|DIGIT|_)*
LETTER       ->  [a-z]|[A-Z]
DIGIT        ->  [0-9]

LIT_INTEGER  ->  DIGIT+
LIT_LOGICAL  ->  .true. | .false.
LITERAL	     ->  LIT_INTEGER | LIT_LOGICAL

TYPE         -> INTEGER | LOGICAL

OP_LOGICAL   ->  <|<=|>|>=|==|!=

EOT          -> "\0000"

LP           -> (
RP           -> )

TOKEN        ->  ID | LIT_INTEGER | LIT_LOGICAL| OP_COMP | , | :: | = | LP | RP
               | IF | THEN | ELSE | END | ELSE | DO | WHILE | EXIT | CONTINUE
               | LIT_LOGICAL | LIT_INTEGER | PROGRAM | FUNCTION | SUBPROGRAM
               | PRINT | EOT | RETURN | TYPE | + | - | * | /

__________________________________________________________________________________________________________________________________________

Syntactic

PROG            ::= (DECLARATION_GROUP)* (FUNCTION_DECL | SUBPROGRAM_DECL)*  PROG_MAIN EOT

PROG_MAIN       ::= PROGRAM ID (STATEMENT)* END PROGRAM


STATEMENT       ::= ( DECLARATION_GROUP | ID ( = EXPRESSION|FUNCTION_ARGS) | IF_STATEMENT | LOOP | EXIT | CONTINUE | RETURN_STMT | PRINT_STMT )
IF_STATEMENT    ::= IF EXPRESSION THEN (STATEMENT)* ( ELSE (STATEMENT*))? END IF

LOOP            ::= DO WHILE LP EXPRESSION RP (STATEMENT)* END DO

//chamamos de DECLARATON_GROUP pq um comando pode ter varias declaracoes.
DECLARATION_GROUP ::= TYPE :: ID (= EXPRESSION)? (,ID (= EXPRESSION)? )*

EXPRESSION      ::= EXP_ARIT (OP_COMP EXP_ARIT)?
EXP_ARIT        ::= TERM ((+|-) TERM)*
TERM            ::= FACTOR ((*|/) FACTOR)*
FACTOR          ::= ID(FUNCTION_ARGS)? | LITERAL | LP EXPRESSION RP

FUNCTION_ARGS   ::= LP (EXPRESSION(,EXPRESSION)*)? RP

RETURN_STMT     ::= RETURN (EXPRESSION)?

PARAMDECLARATION::= TYPE :: ID

SUBROUTINE_DECL ::= FUNCTION_DECL | SUBPROGRAM_DECL
FUNCTION_DECL   ::= FUNCTION TYPE ID LP (PARAMDECLARATION (, PARAMDECLARATION*))? RP (STATEMENT)* END FUNCTION
SUBPROGRAM_DECL ::= SUBPROGRAM ID LP (PARAMDECLARATION (, PARAMDECLARATION*))? RP (STATEMENT)* END SUBPROGRAM

PRINT_STMT      ::= PRINT *, EXPRESSION
