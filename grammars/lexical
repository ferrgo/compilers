Lexic

letter -> [a-z]|[A-Z]
symbol ->
digit -> [0-9]

id -> letter(letter|digit|_)*

integer -> (digit)+
logical -> .true. | .false.

literal -> integer|logical

op_comp -> <|<=|>|>=|==|!=
op_arit -> +|-|*|/

EOL -> "\n\r" | "\n"

EOT -> "\0000"

LP -> (
RP -> )

token -> id|op_comp|op_arit|;|::|LP|RP|=|&|if|else|while|INTEGER|PROGRAM|CHARACTER|PRINT|READ|WRITE|IMPLICIT|NONE|END|EOL|EOT

__________________________________________________________________________________________________________________________________________
//If then problem
//Dangling else

Syntactic

PROGRAM ::= program id EOL (STATEMENT)* end program id EOL

STATEMENT ::= (EXPRESSION| DECLARATION| CONTROL FLOW) EOL | STATEMENT STATEMENT

OP   ::= op_comp | op_arit
TYPE ::= integer|real|character

EXPRESSION ::= EXPRESSION (+|-) TERM | TERM
TERM ::= TERM (*|/) FACTOR | FACTOR
FACTOR ::= ID | NUM | (EXPRESSION)

PRINTSTMT ::= print *, (id|literal)

DECLARATION        ::= TYPE :: DECLARED_VARIABLES
DECLARED_VARIABLES ::= VARNAME | DECLARED_VARIABLES , DECLARED_VARIABLES
VARNAME            ::= id

ASSIGNMENT 				 ::= VARNAME = EXPRESSION
