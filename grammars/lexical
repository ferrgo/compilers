
Lexic

letter -> [a-z]|[A-Z]
symbol ->
digit -> [0-9]

id -> letter(letter|digit|_)*
number -> digit(.digit)?

integer -> (+|-)?(digit)+
real -> (+|-)?(digit)?.(digit)+

op_comp -> <|<=|>|>=|==|!=
op_arit -> +|-|*|/

EOL -> "\n\r" | "\n"  #EOL = End of Line?

EOT -> "\0000" #EOT = End of Text or End of File

token -> id|number|op_comp|op_arit|!|;|::|(|)|{|}|=|&|if|else|while|INTEGER|REAL|PARAMETER|PROGRAM|CHARACTER|READ|WRITE|IMPLICIT|NONE|END|EOL

__________________________________________________________________________________________________________________________________________

Syntactic

PROGRAM ::= program id EOL (STATEMENT)* end program id EOL

STATEMENT ::= (EXPRESSION| DECLARATION| CONTROL FLOW) EOL | STATEMENT STATEMENT

OP   ::= op_comp | op_arit
TYPE ::= integer | real | character

EXPRESSION ::= number | id | (EXPRESSION) | EXPRESSION OP EXPRESSION | OP EXPRESSION

NUMBER_LITERAL     ::= number
CHARACTER_LITERAL  ::= "letter" | "symbol"

DECLARATION        ::= TYPE :: DECLARED_VARIABLES
DECLARED_VARIABLES ::= VARNAME | VARNAME*number | DECLARED_VARIABLES , DECLARED_VARIABLES
VARNAME            ::= id

ASSIGNMENT 				 ::= VARNAME = EXPRESSION

#WHITESPACE         ::= space | tab
#SEPARATOR          ::= COMMENT | WHITESPACE | EOL
COMMENT            ::= ! graphic* EOL
