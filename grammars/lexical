//Gramática para a linguagem FORTRAN--, um subconjunto do FORTRAN 90 (com algumas adaptações)
//Equipe:
// Hugo Ferreira
// Luis Felipe Sampaio
// Oto Alves

Lexic

// Na nossa linguagem, os comentários começam com ! e vão até o fim da linha

LETTER       ->  [a-z]|[A-Z]
DIGIT        ->  [0-9]
ID           ->  LETTER(LETTER|DIGIT|_)*

LIT_INTEGER  ->  DIGIT+
LIT_LOGICAL  ->  .true. | .false.
LITERAL	     ->  LIT_INTEGER | LIT_LOGICAL
// LIT = literal

OP_COMP      ->  <|<=|>|>=|==|!=
OP_ARIT      ->  +|-|*|/

EOT          -> "\0000"

LP           -> (
RP           -> )

TOKEN        ->  ID | LIT_INTEGER | LIT_LOGICAL| OP_COMP | OP_ARIT | , | :: | = | LP | RP
	       | IF | THEN | ELSE | END | ELSE | DO | WHILE | EXIT | CONTINUE | LOGICAL | INTEGER
	       | PROGRAM | FUNCTION | PRINT | EOT

__________________________________________________________________________________________________________________________________________

Syntactic

PROGRAM         ::= (FUNCTION_DECL)* PROGR_MAIN EOT

PROG_MAIN       ::= PROGRAM ID (STATEMENT)* END PROGRAM ID EOT
STATEMENT       ::= ( DECLARATION | ASSIGNMENT | IF_STATEMENT | LOOP)

IF_STATEMENT    ::= IF EXPRESSION THEN (STATEMENT)* ( ELSE STATEMENT)* END IF EOT

LOOP            ::= DO WHILE LP EXPRESSION RP (STATEMENT)* END DO EOT
LOOP_BREAK      ::= EXIT
LOOP_CONTINUE   ::= CONTINUE

DECLARATION     ::= TYPE :: DECLARED_VARS
DECLARED_VARS   ::= ID (,ID)*
ASSIGNMENT 	::= ID = EXPRESSION

EXPRESSION      ::= EXPRESSION_ARIT (OP_COMP EXPRESSION_ARIT)?
EXPRESSION_ARIT ::= EXPRESSION_ARIT (+|-) TERM | TERM
TERM            ::= TERM (*|/) FACTOR | FACTOR
FACTOR          ::= ID | LITERAL | FUNCTION_CALL | LP EXPRESSION_ARIT RP

FUNCTION_CALL   ::= ID LP (EXPRESSION(,EXPRESSION)*)* RP
FUNCTION_DECL   ::= TYPE ID LP (TYPE ID(,TYPE ID)*)? RP (STATEMENT)* END FUNCTION
RETURN_STMT     ::= RETURN ID
// DECL = declaration

PRINT_STMT      ::= PRINT *, EXPRESSION
// STMT = statement
