//Gramática para a linguagem FORTRAN--, um subconjunto do FORTRAN 90 (com algumas adaptações)
//Equipe:
// Hugo Ferreira
// Luis Felipe Sampaio
// Oto Alves

Lexic

// Na nossa linguagem, os comentários começam com ! e vão até o fim da linha

LETTER       ->  [a-z]|[A-Z]
DIGIT        ->  [0-9]
ID           ->  LETTER(LETTER|DIGIT|_)*

LIT_INTEGER  ->  DIGIT+
LIT_LOGICAL  ->  .true. | .false.
LITERAL	     ->  LIT_INTEGER | LIT_LOGICAL
// LIT = literal

TYPE				 -> INTEGER | LOGICAL | CHARACTER

OP_COMP      ->  <|<=|>|>=|==|!=
OP_ARIT      ->  +|-|*|/

EOT          -> "\0000"

LP           -> (
RP           -> )

TOKEN        ->  ID | LIT_INTEGER | LIT_LOGICAL| OP_COMP | OP_ARIT | , | :: | = | LP | RP
								| IF | THEN | ELSE | END | ELSE | DO | WHILE | EXIT | CONTINUE
								| LIT_LOGICAL | LIT_INTEGER | PROGRAM | FUNCTION | PRINT | EOT | RETURN | TYPE

__________________________________________________________________________________________________________________________________________

Syntactic

PROGRAM         ::= (DECL_ASSIGNMENT)* (FUNCTION_DECL)* PROG_MAIN EOT

PROG_MAIN       ::= PROGRAM ID (STATEMENT)* END PROGRAM ID EOT
STATEMENT       ::= ( DECL_ASSIGNMENT | ASSIGNMENT | IF_STATEMENT | LOOP | LOOP_CONTROL )

IF_STATEMENT    ::= IF EXPRESSION THEN (STATEMENT)* ( ELSE STATEMENT)? END IF EOT

LOOP            ::= DO WHILE LP EXPRESSION RP (STATEMENT)* END DO EOT
LOOP_CONTROL		::= LOOP_BREAK | LOOP_CONTINUE
LOOP_BREAK      ::= EXIT
LOOP_CONTINUE   ::= CONTINUE

DECLARATION     ::= TYPE :: DECLARED_VARS
DECL_ASSIGNMENT ::= DECLARATION (= EXPRESSION)?
DECLARED_VARS   ::= ID (,ID)*
ASSIGNMENT 			::= ID = EXPRESSION

EXPRESSION      ::= EXP (OP_COMP EXP)?
EXP							::= TERM EXPRESSION_ARIT
EXPRESSION_ARIT	::= (+|-) TERM EXPRESSION_ARIT | epsilon
TERM            ::= FACTOR TERM'
TERM'						::= (*|/) FACTOR TERM' | epsilon
FACTOR          ::= ID (FUNCTION_CALL)? | LITERAL | LP EXPRESSION_ARIT RP

FUNCTION_CALL   ::= LP (EXPRESSION(,EXPRESSION)*)* RP
FUNCTION_DECL   ::= TYPE ID LP (DECLARATION,)* RP (STATEMENT)* END FUNCTION
RETURN_STMT     ::= RETURN ID
// DECL = declaration

PRINT_STMT      ::= PRINT *, EXPRESSION
// STMT = statement
